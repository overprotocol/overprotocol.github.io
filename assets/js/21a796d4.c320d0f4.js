"use strict";(self.webpackChunkover_docs=self.webpackChunkover_docs||[]).push([[678],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var i=a.createContext({}),l=function(e){var t=a.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},p=function(e){var t=l(e.components);return a.createElement(i.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},g=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,i=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=l(n),g=r,m=u["".concat(i,".").concat(g)]||u[g]||d[g]||o;return n?a.createElement(m,c(c({ref:t},p),{},{components:n})):a.createElement(m,c({ref:t},p))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,c=new Array(o);c[0]=g;var s={};for(var i in t)hasOwnProperty.call(t,i)&&(s[i]=t[i]);s.originalType=e,s[u]="string"==typeof e?e:r,c[1]=s;for(var l=2;l<o;l++)c[l]=n[l];return a.createElement.apply(null,c)}return a.createElement.apply(null,n)}g.displayName="MDXCreateElement"},1542:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>c,default:()=>d,frontMatter:()=>o,metadata:()=>s,toc:()=>l});var a=n(7462),r=(n(7294),n(3905));const o={title:"Secure gRPC connections",description:"How to use secure gRPC connections",lang:"en"},c=void 0,s={unversionedId:"operators/advanced-guides/secure-grpc-connections",id:"operators/advanced-guides/secure-grpc-connections",title:"Secure gRPC connections",description:"How to use secure gRPC connections",source:"@site/docs/operators/advanced-guides/secure-grpc-connections.md",sourceDirName:"operators/advanced-guides",slug:"/operators/advanced-guides/secure-grpc-connections",permalink:"/operators/advanced-guides/secure-grpc-connections",draft:!1,editUrl:"https://github.com/overprotocol/overprotocol.github.io/edit/develop/docs/operators/advanced-guides/secure-grpc-connections.md",tags:[],version:"current",frontMatter:{title:"Secure gRPC connections",description:"How to use secure gRPC connections",lang:"en"},sidebar:"operatorsSidebar",previous:{title:"Run with Docker",permalink:"/operators/advanced-guides/run-with-docker"},next:{title:"OverProtocol Validator FAQs",permalink:"/operators/faqs"}},i={},l=[],p={toc:l},u="wrapper";function d(e){let{components:t,...n}=e;return(0,r.kt)(u,(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"This document will help advanced users create and configure TLS certificates to allow for secure gRPC connections to their beacon nodes."),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"The only practical use for using secure gRPC is in the case of connecting a beacon node that is being hosted remotely. For configurations in which the beacon node and validator reside on the same host system, these steps are not required nor recommended.")),(0,r.kt)("p",null,"A beacon node, by default, hosts a gRPC server on host 127.0.0.1 and port 4000, allowing any other process, such as a validator client, to establish an insecure connection on that port. The beacon node can also allow for secure, TLS connections if ran with the ",(0,r.kt)("inlineCode",{parentName:"p"},"--tls-cert=/path/to/cert.pem")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"--tls-key=/path/to/cert.key")," flags, ensuring all connections via gRPC are secured."),(0,r.kt)("p",null,"A validator client will attempt to connect to a beacon node by default with an insecure connection, but can be a secure TLS connection by using a ",(0,r.kt)("inlineCode",{parentName:"p"},"--tls-cert=/path/to/cert.pem")," flag, utilising either a server pem certificate or a ",(0,r.kt)("inlineCode",{parentName:"p"},"ca.cert")," certificate authority file. Assuming a TLS certificate has already been set up with a trusted authority for your beacon node, use the commands below to launch the node and validator. Otherwise, review the following section on creating your own self-signed certificates."),(0,r.kt)("p",null,"To use secure gRPC with a beacon node:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"beacon-node --tls-cert=server.pem --tls-key=server.key\n")),(0,r.kt)("p",null,"and to use secure gRPC with a validator:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"validator --tls-cert=server.pem\n")),(0,r.kt)("p",null,"Alternatively, a ",(0,r.kt)("inlineCode",{parentName:"p"},"ca.cert")," certificate authority file can be passed to the validator to attempt a connection without requiring the server's certificate itself:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"validator --tls-cert=ca.cert\n")),(0,r.kt)("p",null,"This will generate an output like so:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"[2024-12-07 00:04:34]  INFO validator: Established secure gRPC connection\n")),(0,r.kt)("br",null),(0,r.kt)("h1",{id:"generating-self-signed-tls-certificates"},"Generating self-signed TLS certificates"),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("strong",{parentName:"p"},"NOTICE"),": Creating a self-signed certificate is fine for simple TLS connections, though if the deployment will see public usage, it is always recommended to obtain valid certificates from a trusted certificate authority instead.")),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Install ",(0,r.kt)("a",{parentName:"p",href:"https://www.openssl.org/"},"openssl")," for your operating system.")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Create a root signing key:"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"openssl genrsa -out ca.key 4096\n")),(0,r.kt)("ol",{start:3},(0,r.kt)("li",{parentName:"ol"},"Create a self-signed root certificate")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'openssl req -new -x509 -key ca.key -sha256 -subj "/C=US/ST=NJ/O=CA, Inc." -days 365 -out ca.cert\n')),(0,r.kt)("ol",{start:4},(0,r.kt)("li",{parentName:"ol"},"Create a key certificate for the beacon node:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"openssl genrsa -out beacon.key 4096\n")),(0,r.kt)("ol",{start:5},(0,r.kt)("li",{parentName:"ol"},"Generate a signing CSR by first creating a certificate.conf configuration file containing the specifications. For reference, you can use something as follows with any of its fields customized to your needs:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"[req]\ndefault_bits = 4096\nprompt = no\ndefault_md = sha256\nreq_extensions = req_ext\ndistinguished_name = dn\n[dn]\nC = US\nST = NJ\nO = Test, Inc.\nCN = localhost\n[req_ext]\nsubjectAltName = @alt_names\n[alt_names]\nDNS.1 = localhost\nIP.1 = ::1\nIP.2 = 127.0.0.1\n")),(0,r.kt)("ol",{start:6},(0,r.kt)("li",{parentName:"ol"},"Generate the signing CSR:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"openssl req -new -key beacon.key -out beacon.csr -config certificate.conf\n")),(0,r.kt)("ol",{start:7},(0,r.kt)("li",{parentName:"ol"},"Generate a certificate for the beacon node:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"openssl x509 -req -in beacon.csr -CA ca.cert -CAkey ca.key -CAcreateserial -out beacon.pem -days 365 -sha256 -extfile certificate.conf -extensions req_ext\n")),(0,r.kt)("ol",{start:8},(0,r.kt)("li",{parentName:"ol"},"Verify your certificate is correct with openssl:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"openssl x509 -in beacon.pem -text -noout\n")),(0,r.kt)("p",null,"This will generate an output like so:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},"Certificate:\n    Data:\n        Version: 3 (0x2)\n        Serial Number: 12510557889986420634 (0xad9e6e1dfe99df9a)\n    Signature Algorithm: sha256WithRSAEncryption\n        Issuer: C=US, ST=NJ, O=CA, Inc.\n        Validity\n            Not Before: Jun 15 21:12:24 2020 GMT\n            Not After : Jun 15 21:12:24 2021 GMT\n        Subject: C=US, ST=NJ, O=Test, Inc., CN=localhost\n        Subject Public Key Info:\n            Public Key Algorithm: rsaEncryption\n                Public-Key: (4096 bit)\n")),(0,r.kt)("h1",{id:"using-the-new-certificates"},"Using the new certificates"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Use the certificates to launch the beacon node:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"beacon-node --tls-cert=beacon.pem --tls-key=beacon.key\n")),(0,r.kt)("ol",{start:2},(0,r.kt)("li",{parentName:"ol"},"As well as a validator:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"validator --tls-cert=ca.cert\n")),(0,r.kt)("p",null,"This will generate an output like so:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"[2024-12-07 00:05:12]  INFO validator: Established secure gRPC connection\n")))}d.isMDXComponent=!0}}]);